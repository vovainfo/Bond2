
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Список сплитов для списка secid одного тикера.
// 
// Параметры:
//  МассивSecid - Массив из Строка - список secid одного тикера
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Дата - Дата
//    * Было - Число
//    * Стало - Число
Функция СписокСплитов(МассивSecid) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сплиты.tradedate КАК Дата,
		|	Сплиты.before КАК Было,
		|	Сплиты.after КАК Стало
		|ИЗ
		|	Справочник.Сплиты КАК Сплиты
		|ГДЕ
		|	НЕ Сплиты.ПометкаУдаления
		|	И Сплиты.secid В (&Коды)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	Запрос.УстановитьПараметр("Коды", МассивSecid);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Возврат Выгрузка
КонецФункции


Процедура ЗагрузитьС_MOEXНаСервере(Параметры, АдресРезультата) Экспорт
	URL = "https://iss.moex.com/iss/statistics/engines/stock/splits.json?iss.meta=off&iss.json=extended";

	ДопПараметры = КлиентHTTPКлиентСервер.НовыеДополнительныеПараметры();
	//@skip-check bsl-legacy-check-returning-type-for-environment
	Ответ = КлиентHTTPКлиентСервер.ТелоОтветаКакJSON(ДопПараметры).Получить(URL, , ДопПараметры);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						        	НСтр("ru='Ошибка получения данных с биржи. Код ответа <%1>'"),
						        	Ответ.КодСостояния);
		ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);		
		Возврат;		
	КонецЕсли;
	
	ТелоОтвета = Ответ.Тело[1];
	
	Если ТелоОтвета.splits.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Ошибка получения данных с биржи. Список не загружен.'"));		
		Возврат;		
	КонецЕсли;
	
	БондОбщий.ОчиститьСправочник(Справочники.Сплиты);
	ВсегоЗаписей = ТелоОтвета.splits.Количество();
	ТекущаяЗапись = 1;	

	Для Каждого эл Из ТелоОтвета.splits Цикл
		СплитОбъект = СоздатьЭлемент();
		СплитОбъект.tradedate = ПрочитатьДатуJSON(эл.tradedate, ФорматДатыJSON.ISO); 
		СплитОбъект.before = эл.before;
		СплитОбъект.after = эл.after; 
		СплитОбъект.secid = эл.secid; 
		СплитОбъект.Наименование = СтрШаблон("%1 %2 (%3 -> %4)", СплитОбъект.secid, 
																Формат(СплитОбъект.tradedate, "ДФ=yyyy;"),
																СплитОбъект.before, 
																СплитОбъект.after); 
		СплитОбъект.Записать();
		
		ПроцентВыполнения = Окр((ТекущаяЗапись/ВсегоЗаписей)*100, 0);

		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, СплитОбъект.Наименование);
		ТекущаяЗапись = ТекущаяЗапись + 1;		
	КонецЦикла;
	СтрРезультат = СтрШаблон(НСтр("ru='Загружено %1 записей'"), ВсегоЗаписей);
	ПоместитьВоВременноеХранилище(СтрРезультат, АдресРезультата);
КонецПроцедуры
#КонецОбласти

//@skip-check module-region-empty
#Область ОбработчикиСобытий
#КонецОбласти

//@skip-check module-region-empty
#Область СлужебныйПрограммныйИнтерфейс
#КонецОбласти

//@skip-check module-region-empty
#Область СлужебныеПроцедурыИФункции
#КонецОбласти

#КонецЕсли
